#!/bin/bash
#---------------------------------------------------------------
# Colima Manager for Kubernetes
# Araf Karsh Hamid, (c) Copyright 2025
# License: Apache 2.0
# Version 0.01
#---------------------------------------------------------------

# Function to check if nginx ingress exists
check_nginx_ingress() {
    # Run the kubectl command and store the output
    output=$(kubectl get service nginx-ingress-ingress-nginx-controller -n ingress-nginx 2>&1)
    # Check if the output contains 'nginx-ingress-ingress-nginx-controller'
    if echo "$output" | grep -q 'LoadBalancer'; then
        echo "CHECK>> NGINX Ingress Available!"
        return 0
    else
        echo "CHECK>> NGINX Ingress not found."
        return 1
    fi
}

# Function to check and install NGINX ingress if not found
install_if_nginx_ingress_missing() {
    if ! check_nginx_ingress; then
        echo "Installing NGINX ingress..."
        echo "helm install nginx-ingress ingress-nginx/ingress-nginx -n ingress-nginx --create-namespace"
        helm install nginx-ingress ingress-nginx/ingress-nginx -n ingress-nginx --create-namespace
    fi
}

# Function to check and uninstall NGINX ingress if found
uninstall_if_nginx_ingress_found() {
    if check_nginx_ingress; then
        echo "UnInstalling NGINX ingress..."
        helm list -A
        echo "helm uninstall nginx-ingress -n ingress-nginx"
        helm uninstall nginx-ingress -n ingress-nginx
    fi
}

# Function to check if nginx gateway exists
check_nginx_gateway() {
    # Run the kubectl command and store the output
    output=$(kubectl get service ngf-nginx-gateway-fabric -n nginx-gateway 2>&1)
    # Check if the output contains 'ngf-nginx-gateway-fabric'
    if echo "$output" | grep -q 'LoadBalancer'; then
        echo "CHECK>> NGINX Gateway Available!"
        return 0
    else
        echo "CHECK>> NGINX Gateway not found."
        return 1
    fi
}

# Function to check and install NGINX Gateway if not found
install_if_nginx_gateway_missing() {
    if ! check_nginx_gateway; then
        echo "Installing NGINX Gateway..."
        echo "helm install ngf oci://ghcr.io/nginx/charts/nginx-gateway-fabric --create-namespace -n nginx-gateway"
        helm install ngf oci://ghcr.io/nginx/charts/nginx-gateway-fabric --create-namespace -n nginx-gateway
    fi
}

# Function to check and uninstall NGINX Gateway if found
uninstall_if_nginx_gateway_found() {
    if check_nginx_gateway; then
        echo "UnInstalling NGINX Gateway..."
        helm list -A
        echo "helm uninstall ngf -n nginx-gateway"
        helm uninstall ngf -n nginx-gateway
    fi
}

# Function to check if istio-ingressgateway exists
check_istio_ingress() {
    # Run the kubectl command and store the output
    output=$(kubectl get service istio-ingressgateway -n istio-ingress 2>&1)

    # Check if the output contains 'istio-ingressgateway'
    if echo "$output" | grep -q 'LoadBalancer'; then
        echo "CHECK>> Istio Ingress-gateway Available!"
        return 0
    else
        echo "CHECK>> Istio Ingress-gateway not found."
        return 1
    fi
}

# Function to check and install Istio ingress if not found
install_if_istio_ingress_missing() {
    if ! check_istio_ingress; then
        echo "Installing Istio ingress-gateway..."
        echo "helm install istio-ingressgateway istio/gateway -n istio-ingress"
        helm install istio-ingressgateway istio/gateway -n istio-ingress
        helm list -A
    fi
}

# Function to check and uninstall Istio ingress if found
uninstall_if_istio_ingress_found() {
    if check_istio_ingress; then
        echo "UnInstalling Istio ingress-gateway..."
        helm list -A
        echo "helm uninstall istio-ingressgateway -n istio-ingress"
        helm uninstall istio-ingressgateway -n istio-ingress
    fi
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to check and start Colima
check_and_start_colima() {
    # Check if Colima is installed
    if command_exists colima; then
        # Redirect stderr of `colima status` to a temporary file and check for "running"
        status=$(colima status 2> /tmp/cs.txt && cat /tmp/cs.txt | grep -iq "running" && echo "running")

        # Check if `status` is null
        if [ -z "$status" ]; then
            echo "Colima is not running. Starting Colima..."
            echo "colima start --kubernetes --cpu 4 --memory 4"
            colima start --kubernetes --cpu 4 --memory 4
            if [ $? -eq 0 ]; then
		echo "---------------------------------------------------------------"
                echo "Colima started successfully."
		echo "---------------------------------------------------------------"
		echo "kubectl cluster-info"
		kubectl cluster-info
		echo "---------------------------------------------------------------"
		echo "kubectl get nodes -o wide "
		echo "---------------------------------------------------------------"
		kubectl get nodes -o wide 
		echo "---------------------------------------------------------------"
		echo "kubectl get pods -n kube-system -o wide"
		echo "---------------------------------------------------------------"
		kubectl get pods -n kube-system -o wide
		echo "---------------------------------------------------------------"
            else
                echo "Failed to start Colima. Please check the logs."
            fi
        fi
    else
        echo "Colima is not installed. Please install Colima before running this script."
        echo "Visit https://github.com/abiosoft/colima for installation instructions."
        exit 1
    fi
}

# Automatically call the function when the script is sourced
check_and_start_colima
